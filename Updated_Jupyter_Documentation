{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The primary goal of this project is to determine if we can use ebird to automate updates to the IBA database. Our approach is broken into the following parts:\n",
    "\n",
    "### 1. Exploratory Analysis\n",
    "####    a. Determine number of IBA sites and the status of these sites (pending, etc) and investigate discrepencies between the GIS data and IBA database\n",
    "####    b. Determine percent of sites and species that fall under each criteria code\n",
    "\n",
    "\n",
    "### 2. Analysis of IBA criteria code categories\n",
    "####    a. Identify information needed to update species info in each category\n",
    "####    b. Obtain and organize different data sources\n",
    "####    c. Identify what sites and species need updating\n",
    "\n",
    "\n",
    "### 3. Set up process to update IBA data with ebird\n",
    "####    a. Automate update according to state\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "     "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part 1: Exploratory Analysis\n",
    "##### What can we tell from just looking at this data? \n",
    "\n",
    "#### a. Determine number of IBA sites and the status of these sites \n",
    "\n",
    "Problem 1: Some of these sites are duplicated but assigned unique Site_ID numbers and not all of these sites are recognized. In other words, the status of some sites are Rejected, Nominated, Merged, Pending, Potential, Delisted, or Identified. \n",
    "Solution: Remove duplicates and those sites that are not recognized. \n",
    "\n",
    "\n",
    "Problem 2: Not all of these sites have a species observation, and therefore a criteria listing. \n",
    "Solution: Filter down site data in access to all the unique, recognized sites, with species observations (site species criteria status Query). \n",
    "\n",
    "\n",
    "\n",
    "#### Results:\n",
    "According to dob_Site on the IBA Access Database, there are 3950 sites. Removing duplicates, there are 3895 unique sites. Removing those sites that have not been recognized, there are XXX recognized unique sites. Of the recognized sites, XXX have a species observation with a criteria code. \n",
    "\n",
    "##### To summarize, not all dbo_sites on the IBA database have a criteria code assignment or species information. Sometimes they have one or the other, both, or none. We may not be able to use ebird to assign criteria codes, but we can certainly use ebird to determine which species are present at a particular site. \n",
    "\n",
    "The R script to come up with each of these evaluations is provided below. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "library(\"plyr\")\n",
    "library(\"ggplot2\")\n",
    "library(\"dplyr\")\n",
    "library(\"data.table\")\n",
    "\n",
    "setwd(\"~/IBA_Update/IBA_Database/Corrected_Queries\")\n",
    "\n",
    "# Import raw dbo_Sites from IBA_Database in Access\n",
    "Query <- read.csv(\"Site_Status_Query.csv\", header = TRUE, sep = \",\")\n",
    "Num_dbo_Sites <- nrow(Query)  # 3950 Total Sites\n",
    "\n",
    "# Remove the dbo_Site entries that are duplicated\n",
    "UniqueSites <- Query[!duplicated(Query[2]),] # 3894 Unique sites\n",
    "UniqueSites$Description <- as.character(UniqueSites$Description) \n",
    "UniqueSites$Description[UniqueSites$Description == \"\"] <- \"No Status\"  # Label sites with no status\n",
    "UniqueSites$Description <- as.factor(UniqueSites$Description)\n",
    "Num_Uniquesites <- nrow(UniqueSites) \n",
    "\n",
    "\n",
    "# Table of Sites in each Status Category and plot number of unique sites in each category\n",
    "SiteStatus <- data.frame(table(UniqueSites$Description)) # 2423 Recognized Unique Sites\n",
    "colnames(SiteStatus)[colnames(SiteStatus)==\"Var1\"] <- \"Status\" \n",
    "\n",
    "  ggplot(UniqueSites, aes(x = UniqueSites$Description)) +\n",
    "    xlab(\"Status\") + ylab(\"Number of Unique Sites\") + ggtitle(\"Number of Sites per Status Type\") +\n",
    "    theme(plot.title = element_text(size = 24, face = \"bold\"), axis.title.x = element_text(size = 14),\n",
    "          axis.title.y = element_text(size = 14)) +\n",
    "    geom_bar()\n",
    "\n",
    "\n",
    "# Make new dataframe with only recognized sites and plot recognized sites in each state\n",
    "Recognized_UniqueSites <- UniqueSites[UniqueSites$Description == 'Recognized',]\n",
    "State_Sites <- data.frame(table(Recognized_UniqueSites$Abbreviation))\n",
    "colnames(State_Sites)[colnames(State_Sites)==\"Var1\"] <- \"State\" \n",
    "\n",
    "  ggplot(Recognized_UniqueSites, aes(x = Recognized_UniqueSites$Abbreviation)) +\n",
    "    xlab(\"State\") + ylab(\"Number of Sites\") + ggtitle(\"Number of Recognized Unique Sites per State\") +\n",
    "    theme(plot.title = element_text(size = 24, face = \"bold\"), axis.title.x = element_text(size = 14),\n",
    "          axis.title.y = element_text(size = 14)) +\n",
    "    geom_bar()\n",
    "\n",
    "Num_UniqueRecognized <- nrow(Recognized_UniqueSites) \n",
    "\n",
    "# Find number of Unique Recognized Sites that have an assigned criteria code\n",
    "Site_Status_Criteria <- read.csv(\"Site_Status_Criteria_Query.csv\", header = TRUE, sep=\",\")\n",
    "Unique_SSC <- Site_Status_Criteria[!duplicated(Site_Status_Criteria[2]),]\n",
    "Site_Criteria_Recognized <- Unique_SSC[Unique_SSC$Description == 'Recognized',]\n",
    "Num_UniqueCriteria_Sites <- nrow(Unique_SSC)\n",
    "\n",
    "\n",
    "# Make new dataframe with number of unique recognized sites per criteria code\n",
    "CodeCategory_UniqueRecognized <- Site_Criteria_Recognized[!duplicated(Site_Criteria_Recognized[2:4]),]# remove duplicates\n",
    "  \n",
    "  ggplot(CodeCategory_UniqueRecognized, aes(x=CodeCategory_UniqueRecognized$Code)) +\n",
    "    xlab(\"Code Category\") + ylab(\"Number of Sites\") + ggtitle(\"Number of Recognized Unique Sites per Code Category\") +\n",
    "    theme(plot.title = element_text(size = 24, face = \"bold\"), axis.title.x = element_text(size = 14),\n",
    "          axis.title.y = element_text(size = 14)) +\n",
    "    geom_bar()\n",
    "\n",
    "CodeCategory_Table <- data.frame(table(CodeCategory_UniqueRecognized$Code))\n",
    "colnames(CodeCategory_Table)[colnames(CodeCategory_Table)==\"Var1\"] <- \"Code\" \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# LIST OF ALL & RECOGNIZED SITES WITH CRITERIA THAT DO NOT HAVE SPECIES INFORMATION\n",
    "SpeciesSites <- read.csv(\"Site_Species_Status_Criteria.csv\", header = TRUE, sep=\",\")\n",
    "Unique_SpeciesSites <- SpeciesSites[!duplicated(SpeciesSites[2]),]\n",
    "Recognized_SpeciesSites <- Unique_SpeciesSites[Unique_SpeciesSites$dbo_Status_Description == 'Recognized',]\n",
    "Num_Recognized_SpeciesSites <- nrow(Recognized_SpeciesSites)\n",
    "\n",
    "Rec_SppSite_List <- subset.data.frame(Recognized_SpeciesSites[2],)\n",
    "Rec_SSC_List <- subset.data.frame(Site_Criteria_Recognized[2],)\n",
    "ALL_SppSite_List <- subset.data.frame(Unique_SpeciesSites[2],)\n",
    "ALL_SSC_List <- subset.data.frame(Unique_SSC[2],)\n",
    "\n",
    "ALL_SITES_MISSING_SPECIES <- anti_join(ALL_SSC_List,ALL_SppSite_List)\n",
    "Recognized_SITES_MISSING_SPECIES <- anti_join(Rec_SSC_List,Rec_SppSite_List)\n",
    "Num_Recognized_missing <- nrow(Recognized_SITES_MISSING_SPECIES)\n",
    "Num_ALL_missing <- nrow(ALL_SITES_MISSING_SPECIES)\n",
    "\n",
    "\n",
    "###############################################################\n",
    "## Count Results!!!\n",
    "###############################################################\n",
    "\n",
    "cat(paste0(\"No. of dbo_Sites listed in IBA_Database: \", Num_dbo_Sites, \"\\n\",\n",
    "           \"No. of unique sites listed in IBA_Database: \", Num_Uniquesites, \"\\n\",\n",
    "           \"No of unique, recognized sites in IBA_Database: \", Num_UniqueRecognized, \"\\n\",\n",
    "           \"No. of unique sites with a criteria code: \", Num_UniqueCriteria_Sites, \"\\n\",\n",
    "           \"No. of unique, recognized sityes in IBA that have SPP info: \", Num_Recognized_SpeciesSites, \"\\n\",\n",
    "           \"No. of unique, recognized sites with criteria missing SPP info: \", Num_Recognized_missing, \"\\n\",\n",
    "           \"No. of all unique sites with criteria missing SPP info: \", Num_ALL_missing))\n",
    "\n",
    "\n",
    "print(SiteStatus)\n",
    "\n",
    "print(CodeCategory_Table)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Summary of IBA Site Information:\n",
    "No. of dbo_Sites listed in IBA_Database: 3950\n",
    "No. of unique sites listed in IBA_Database: 3894\n",
    "No of unique, recognized sites in IBA_Database: 2423\n",
    "No. of unique sites with a criteria code: 2585\n",
    "No. of unique, recognized sityes in IBA that have SPP info: 1424\n",
    "No. of unique, recognized sites with criteria missing SPP info: 688\n",
    "No. of all unique sites with criteria missing SPP info: 965"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "####    b. Determine percent of sites and species that fall under each criteria code\n",
    "\n",
    "\n",
    "The following script was run in R to determine what percent of species and sites in the IBA database (those that have species information) have been classified according to certain criteria that were used to designate the IBAs. The output is a visual representation in the form of a bar graph where the x axis indicates criteria category and the y axis indicates the percent of species (or sites) that were classified according to that criteria. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning message in Ops.factor(left, right):\n",
      "\"'/' not meaningful for factors\"Warning message in Ops.factor(left, right):\n",
      "\"'/' not meaningful for factors\""
     ]
    },
    {
     "data": {
      "image/png": "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\niSAqxP8DuMdzMRH5n/AAAAAASUVORK5CYII=",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning message in Ops.factor(left, right):\n",
      "\"'/' not meaningful for factors\""
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning message in Ops.factor(left, right):\n",
      "\"'/' not meaningful for factors\""
     ]
    },
    {
     "data": {
      "image/png": "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\nqXaSb+GRVKwXGNmkCzwAabZKtZN8C4+kYr3AyCZd4AFIs1WqneRbeCQV6wVGNukCD0CarVLt\nJN/CI6lYLzCySRd4ANJslWon+RYeScV6gZFNusADkGarVDvJt/BIKtYLjGzSBR6ANFul2km+\nhUdSsV5gZJMu8ACk2SrVTvItPJKK9YI/4wFI81WqneRbeCQV6wV/xgOQ5qu0O8m38Fgv+DMe\ngDRfJSDNKdYL/owHIM1XWQYkgTJzq9A63H/FA5DmqwSkVWV+jgcgzVcJSKvK/BwPQJqvEpBW\nlfk5HoA0XyUgrSrzczwAab5KQFpV5ud4ANJ8lYC0qszP8QCk+SoBaVWZn+MBSPNVAtKqMj/H\nA5DmqwSkVWV+jgcgyXsA0nLBn/EAJHkPQFou+DMegCTvAUjLBX/GA5DkPQBpueDPeGwIkkC1\nNjwAabngz3gAkrwHIC0X/BkPQJL3AKTlgj/jAUjyHoC0XPBnPABJ3gOQlgv+jAcgyXsA0nLB\nn/EAJHkPQFou+DMegCTvAUjLBX/GA5DkPQBpueDPeACSvAcgLRf8GQ9AkvfQARIem3oAkrwH\nIH2gByDJewDSB3oAkrwHIH2gByDJewDSB3oAkrwHIH2gByDJewDSB3oAkrwHIH2gByDJewDS\nB3oAkrwHIH2gByDJewDSB3oAkrwHIH2gByDJewDSB3oAkrwHIH2gByDJewDSB3oAkrwHIH2g\nByDJewDSB3oAkrwHIH2gByDJewDSB3oAkrwHIH2gByDJewDSB3oAkrwHIH2gByDJewDSB3oA\nkrwHIH2gByDJewDSB3oAkrwHIH2gxy9Bqh8BSLEUgPR5Hr8Dqe7/B0iBFID0eR6AJO9hpEw8\nJD0ASd7DSJl4SHqsBem/JpavSBB/PlbukZInBuICIx5GysRjnQCQDKTAQ78HIBlIgYd+D0Ay\nkAIP/R6AZCAFHvo9fgVS6M6GTaq16GGkTDzWCX4Hkh/bVWvRw0iZeKwTAJKBFHjo9wAkAynw\n0O8BSAZS4KHfA5AMpMBDvwcgGUiBh34PQDKQAg/9HoBkIAUe+j0AyUAKPPR7AJKBFHjo9wAk\nAynw0O8BSAZS4KHfA5AMpMBDvwcgGUiBh34PQDKQAg/9HoBkIAUe+j0AyUAKPPR7AJKBFHjo\n9wAkAynw0O8BSAZS4KHfA5AMpMBDvwcgGUiBh34PQDKQAg/9HoBkIAUe+j0AyUAKPPR7SIAU\niuQfTVovMOJhpEw8pASApDYFHpY8AEltCjwseQCS2hR4WPKQBYkgPjQAiSAEApAIQiAAiSAE\nApAIQiAAiSAEQgykevIiLPD/EO1vBK9XE9FkcZ1eXs8KAiW0MdaHFeFOEgLPIVRIUFAvXz8s\nmlOky5z4hBfXCwT13PJUCQuX1+nl4QH1VvBDCqR6GIFZwehPo/9CEPNILE4uTwuGwuo5m+6f\nSCcJgQdpEMR5QXL9ZSJHkS5zmiKxOC1IJlifYoHFWBadF/Ig1TEzQZDCHonFyeVpwd0b1ahN\n9896kIIWCUFyfdc03oejmCsz5pNYnBYkE6xPscBiLNsQpKiZW2lij5EQ1OGmpovr9PJ6TtD/\n6GqcfxIgRTQJgYdqqNGgYDJ03uJJub55cpbGy4zVGV4cqSC0RYLL68kiX7J0+VQ3WT6di5MJ\n5YcQSM5Aht28kY5tuWWC+PwaLZ4gMF1ezwmiIM11OlopBlJU4CyeAynaamgxIAmBFD9FegtI\n0Qn4aiR+8jH+b35xECR/eQCkUQLfJutiQ1gyOnmNL441GhLU6cWxeb4ApFCZw7+hOsOLwyAF\nt0g8QT2fYsnyCUhzE2Mki8xvIZDqyf9nBDMbbm7+vf7fN1MnF0+37GT5eLymCUI26U5nWp3O\nlPDiSKNhwWS7zzeSCVK8zFid4cVBkMJbJJ4gAIpXwoLl48kWWB4EKTgSrxACyf2UXS0Iz7+X\noBfWycV1enk9n39yCpoJ0swUTYMUbjQsCIE004goSKE6w4vDIAW3SCR/6ES69vbCS5ZPQJou\nfxdIk//HBeFCekFM4yUffwCGF0+37GT5eLxG+VeClBAENfXkn7kSott9vpEskObKjNUZXhwE\naSQIf86E+ghIFi4fgxRYHkwzM39lQPJKWrJZZgSRHNNNn5gZc9stAFIk/+w0T4E02+q2II2S\nTEWpNubLjIE0WjzdIFNBuLRQHUHkFi2v08uDAxrfqNuD5B3BBTMEl6sBya0/DNJwmBBpdXg/\ntHx6jDsGKSSoU+vXiRxzZaTLnIIUXFwvENRzy1MpFi6v08vDAxqem8/gXjuCEAhAIgiBACSC\nEAhAIgiBACSCEAhAIgiBACSCEAhAIgiBACSCEAhA0hD/jnV1vLjvVM2GuYTVVWSjTbMsWImQ\nCYZXQZyqZ+yuw1vNvN9FNk6EiUCW9EqEUDC874+vqn7sR26Pf3wG8uZ+LMuvkhG5wfC+Pa7d\n1D9WR29B1tyPZvlNMiI7GN63x6n6al/cDudmwt921aGZ988Dteb9866qz82LYdnj/OlQVfUp\nluW50u78WlRXp/soFSEcgPT22Ff/nJ+q6kHIyQXp8Hyx95Y9DuSecYpkefzYrdS+PIxSEcIB\nSG8P/6DrMc9vrzfbBZfmjdu+uoyWfd/v386qfpbvqv53/1e3ovZl5aUihAOQ3h5jkH66N9sF\nh6qB5/Y4pHOXTVb1sxyesFyanc/hudKlWe6kIoQDkN4eY5D6f9qXVRfesvv9evnaR0GaZHm9\n7FMRwsGYvj0O/dnN5bYcpP0IiUQWQCocjOnb46u73vZT7YIg9Upn2bHanS9XZ1kii/uSKBAM\n7duj/wZoX50D8/4wXBsYL3NB8rN050iH7uVPe47EZYZSAUjvj+PznoTroWqeUOPB0qDxvOp2\nP7cXG5xlP/d/7jmSn8W5ancZrto5qQjhACQFsXfuknNg2VVPKNqlzf7GWfa6sa69jDfN4n6P\n9Pzy6OicWIXvISJWBSBpiO/HZN9/P186sPzsniA1tyNUxxFkjx1Qtf+5eDsXJ8tjpbq/s+HL\nu7OhTUUIByARhEAAEkEIBCARhEAAEkEIBCARhEAAEkEIBCARhEAAEkEIBCARhEAAEkEIBCAR\nhEAAEkEIxP8DMi//0hCSeTQAAAAASUVORK5CYII=",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Access this script in ImportantBirdAreas > Data > SpeciesDataUpdate > \n",
    "## SpeciesUpdate_Scripts > CriteriaPercentage_Calculations.R\n",
    "\n",
    "#setwd(\"~/IBA_Internship\")\n",
    "#library(devtools)\n",
    "#library(dplyr)\n",
    "#library(ggplot2)\n",
    "#library(shiny)\n",
    "#library(statsr)\n",
    "#library(ISLR)\n",
    "\n",
    "\n",
    "## Duplicated value problem: Several sites with the same criteria code were recorded more than once. In some cases, this was because different years of assignment\n",
    "## were included. So, I ran it both ways: with and without duplicated assignment across years. For instance, Little River Bottoms was assigned D1 twice in 2008 and\n",
    "## twice in 2011. So in Unique_CCSite_Combo, all replicated D1s are removed for Little River Bottoms. In Unique_CCSite_Year_combo, one was kept for each year (thus\n",
    "## resulting in two D1 assignments). Some sites were assigned more than 1 criteria code, I treated these as separate assignments.\n",
    "\n",
    "## SPECIAL NOTE: For the calculations that include duplicates of the classification codes for different sampling years, missing year values\n",
    "## were treated as a separate. These were kept as missing dates were assumed to be separate observation. \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "######## Import Data From CSV ########\n",
    "data = read.csv(\"CriteriaQuery.csv\", header = TRUE, sep = \",\")\n",
    "colnames = names(data)\n",
    "\n",
    "###### CLASSIFICATION PERCENTAGES FOR SITE. MULTIPLE YEARS NOT INCLUDED ######\n",
    "Unique_CCSite_Combo = data[!duplicated(data[5:6]),] # Get rid of duplicated sites with the same site name and criteria code. Different sampling years not included.\n",
    "num_cc = data.frame(count(Unique_CCSite_Combo, Criteria_Code))\n",
    "num_site_assignments = nrow(Unique_CCSite_Combo)\n",
    "percent_cc = (num_cc/num_site_assignments)*100\n",
    "CC_Percentages = cbind(num_cc, percent_cc[,2])\n",
    "names(CC_Percentages)[3] <- \"percentage\"\n",
    "CC_Percentages = arrange(CC_Percentages, desc(percentage))\n",
    "## Plot ##\n",
    "ggplot(CC_Percentages, aes(x = CC_Percentages$Criteria_Code, y = CC_Percentages$percentage)) +\n",
    "  xlab(\"Criteria Code\") + ylab(\"Percent\") + ggtitle(\"Percent of Sites Classified According to Criteria Code\", subtitle = \"NOT Including Multi-Year Classifications\") +\n",
    "  theme(plot.title = element_text(size = 25, face = \"bold\"), axis.title.x = element_text(size = 12),\n",
    "        axis.title.y = element_text(size = 12)) +\n",
    "  geom_bar(stat = \"identity\")\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "###### CLASSIFICATION PERCENTAGES FOR SITE. MULTIPLE YEARS INCLUDED ######\n",
    "Unique_CCSite_Year_Combo = data[!duplicated(data[c(5:6,11)]),] # Get rid of duplicated sites with same site name, criteria code, and year. Different sampling years included.\n",
    "num_cc_yrs = data.frame(count(Unique_CCSite_Year_Combo, Criteria_Code))\n",
    "num_site_assignments_yrs = nrow(Unique_CCSite_Year_Combo)\n",
    "percent_cc_yrs = (num_cc_yrs/num_site_assignments_yrs)*100\n",
    "CC_Percentages_yrs = cbind(num_cc_yrs, percent_cc_yrs[,2])\n",
    "names(CC_Percentages_yrs)[3] <- \"percentage\"\n",
    "## Plot ##\n",
    "ggplot(CC_Percentages_yrs, aes(x = CC_Percentages_yrs$Criteria_Code, y = CC_Percentages_yrs$percentage)) +\n",
    "  xlab(\"Criteria Code\") + ylab(\"Percent\") + ggtitle(\"Percent of Sites Classified According to Criteria Code\", subtitle = \"Including Multi-Year Classifications\") +\n",
    "  theme(plot.title = element_text(size = 25, face = \"bold\"), axis.title.x = element_text(size = 12),\n",
    "        axis.title.y = element_text(size = 12)) +\n",
    "  geom_bar(stat = \"identity\")\n",
    "\n",
    "################## Same code for sites but adjusted to be for species ##############################################################################\n",
    "####################################################################################################################################################\n",
    "\n",
    "###### CLASSIFICATION PERCENTAGES FOR SPECIES. MULTIPLE YEARS NOT INCLUDED ######\n",
    "Unique_CCSpecies_Combo = data[!duplicated(data[c(5,8)]),] # Get rid of duplicates with the same speices ID and Criteria Code. Different sampling years not included.\n",
    "num_cc = data.frame(count(Unique_CCSpecies_Combo, Criteria_Code))\n",
    "num_site_assignments = nrow(Unique_CCSpecies_Combo)\n",
    "percent_cc = (num_cc/num_site_assignments)*100\n",
    "CCSpecies_Percentages = cbind(num_cc, percent_cc[,2])\n",
    "names(CCSpecies_Percentages)[3] <- \"percentage\"\n",
    "CCSpecies_Percentages = arrange(CCSpecies_Percentages, desc(percentage))\n",
    "## Plot ##\n",
    "ggplot(CCSpecies_Percentages, aes(x = CCSpecies_Percentages$Criteria_Code, y = CCSpecies_Percentages$percentage)) +\n",
    "  xlab(\"Criteria Code\") + ylab(\"Percent\") + ggtitle(\"Percent of Species Classified According to Criteria Code\", subtitle = \"NOT Including Multi-Year Classifications\") +\n",
    "  theme(plot.title = element_text(size = 25, face = \"bold\"), axis.title.x = element_text(size = 12),\n",
    "        axis.title.y = element_text(size = 12)) +\n",
    "  geom_bar(stat = \"identity\")\n",
    "\n",
    "\n",
    "###### CLASSIFICATION PERCENTAGES FOR SPECIES. MULTIPLE YEARS INCLUDED ######\n",
    "Unique_CCSpecies_Year_Combo = data[!duplicated(data[c(5,8,11)]),] # Get rid of duplicated sites with same site name, criteria code, and year. Different sampling years included.\n",
    "num_cc_yrs = data.frame(count(Unique_CCSpecies_Year_Combo, Criteria_Code))\n",
    "num_site_assignments_yrs = nrow(Unique_CCSpecies_Year_Combo)\n",
    "percent_cc_yrs = (num_cc_yrs/num_site_assignments_yrs)*100\n",
    "CCSpecies_Percentages_yrs = cbind(num_cc_yrs, percent_cc_yrs[,2])\n",
    "names(CCSpecies_Percentages_yrs)[3] <- \"percentage\"\n",
    "## Plot ##\n",
    "ggplot(CCSpecies_Percentages_yrs, aes(x = CCSpecies_Percentages_yrs$Criteria_Code, y = CCSpecies_Percentages_yrs$percentage)) +\n",
    "  xlab(\"Criteria Code\") + ylab(\"Percent\") + ggtitle(\"Percent of Species Classified According to Criteria Code\", subtitle = \"Including Multi-Year Classifications\") +\n",
    "  theme(plot.title = element_text(size = 25, face = \"bold\"), axis.title.x = element_text(size = 12),\n",
    "        axis.title.y = element_text(size = 12)) +\n",
    "  geom_bar(stat = \"identity\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From step 1, we can see that most sites were classified according to D1 and A1 criteria. We can also see that most species were classified according to D1, D3, and D4i criteria. \n",
    "\n",
    "### Ultimately, this step provided valuable information regarding which criteria categories were used most frequently to designate IBAs. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*******************************************************************************************************************************"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*******************************************************************************************************************************"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "       \n",
    "# Part 2: Analysis of IBA criteria code categories\n",
    "\n",
    "##### Do the IBAs listed for each criteria still meet the requirements of that criteria? \n",
    "\n",
    "\n",
    "####    a. Identify information needed to update species info in each category\n",
    "Each site is assigned a criteria code based on characteristics of the species that have been observed at that site. In order to update the IBA species information, it is critical to identify the data sources required for the update of species in each criteria code. Moving forward, the best approach is to divide the update according to criteria code. We first analyze what is needed to update the species that fall into the A criteria code categories. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Global IBA Criteria A1: Sites that are known or thought regularly to hold significant numbers of a globally threatened species.\n",
    "\n",
    "##### This site qualifies if it holds a population of species categorized by the IUCN RED LIST as Critically Endangered, Endangered, or Vulnerable. If a species falls under the vulnerable category, the IBA site must have \"more than threshold numbers of that species.\" \n",
    "        \n",
    "        \n",
    "#### Information Needed to Update A1 IBA Sites:\n",
    "1. An Updated IUCN Red List CSV\n",
    "2. Threshold values for each vulnerable species in the IBA database\n",
    "3. Ebird database\n",
    "4. GIS shape file containing polygons that enclose each IBA site\n",
    "\n",
    "\n",
    "#### Information Needed to Update A4 IBA Sites:\n",
    "1. Current population estimates for each A4 species \n",
    "2. TBD"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "####    b. Obtain and organize different data sources:\n",
    "\n",
    "##### 1. An Updated IUCN Red List CSV\n",
    "We reached out to the IUCN at redlist@iucn.org. They provided us separate csv files that contained common names and the threat status for each species on the redlist. To make one comprehensive list with common name, I put both into an access database and ran a query to produce one csv sheet that contained common name and threat status. I then wrote a script in R that searches each IBA species according to common name and assigns a threat status if it is currently listed. If it is not, I simply assigned in the value \"not listed.\" This code is provided below. \n",
    "\n",
    "filepath:\n",
    "\n",
    "##### 2. Threshold values for each vulnerable species in the IBA database\n",
    "We reached out to Zoltan Waliczky at aliczky@birdlife.org. He put us into contact with Friederike Richter at friederike.richter@birdlife.org who we are currently waiting on to provide a list of threshold values for each vulnerable species in North America. \n",
    "\n",
    "filepath:\n",
    "        \n",
    "\n",
    "##### 3. Ebird database\n",
    "The ebird database is located on the server. Due to the size of the txt file, it was necessary to run an r script that filters out the information you need from ebird. We need all species information from ebird for each site, so we had to obtain the x min, y min, x max, y max coordinates from the GIS file (described below in step 4). Filtering each site individually out of the entire ebird database would have taken weeks. So I applied a filter that would take all ebird entries from the last 10 years, and separate them out into smaller, more manageable, files according to state. \n",
    "\n",
    "The 50 files of ebird observations separated by state then served as the input data to be filtered according to IBA site (described further in step 4). \n",
    "\n",
    "filepath: box > ImportantBirdAreas > Data > SpeciesDataUpdate> SpeciesUpdateScripts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "Attaching package: 'dplyr'\n",
      "\n",
      "The following objects are masked from 'package:stats':\n",
      "\n",
      "    filter, lag\n",
      "\n",
      "The following objects are masked from 'package:base':\n",
      "\n",
      "    intersect, setdiff, setequal, union\n",
      "\n",
      "Registered S3 methods overwritten by 'ggplot2':\n",
      "  method         from \n",
      "  [.quosures     rlang\n",
      "  c.quosures     rlang\n",
      "  print.quosures rlang\n",
      "Registered S3 method overwritten by 'rvest':\n",
      "  method            from\n",
      "  read_xml.response xml2\n",
      "-- Attaching packages --------------------------------------- tidyverse 1.2.1 --\n",
      "v ggplot2 3.1.1     v readr   1.3.1\n",
      "v tibble  2.1.1     v purrr   0.3.2\n",
      "v tidyr   0.8.3     v stringr 1.4.0\n",
      "v ggplot2 3.1.1     v forcats 0.4.0\n",
      "-- Conflicts ------------------------------------------ tidyverse_conflicts() --\n",
      "x dplyr::filter() masks stats::filter()\n",
      "x dplyr::lag()    masks stats::lag()\n"
     ]
    },
    {
     "ename": "ERROR",
     "evalue": "Error in library(auk): there is no package called 'auk'\n",
     "output_type": "error",
     "traceback": [
      "Error in library(auk): there is no package called 'auk'\nTraceback:\n",
      "1. library(auk)"
     ]
    }
   ],
   "source": [
    "## Filter Ebird by state\n",
    "\n",
    "library(\"dplyr\")\n",
    "library(tidyverse)\n",
    "library(auk)\n",
    "library(data.table)\n",
    "install.packages(\"snowfall\")\n",
    "install.packages(\"snow\")\n",
    "library(snowfall)\n",
    "library(snow)\n",
    "\n",
    "\n",
    "# Set temporary directory\n",
    "write(\"TMP = 'G:/Temp'\", file=file.path(Sys.getenv('R_USER'), '.Renviron'))\n",
    "\n",
    "# set working directory and see what's inside\n",
    "ebd_dir <- \"F:/eBird/Dec2018Clean\"\n",
    "setwd(ebd_dir)\n",
    "dir()\n",
    "\n",
    "# set ebird ebd count file\n",
    "f_ebd <- file.path(ebd_dir, \"ebd_relDec-2018.txt\")\n",
    "\n",
    "# create your filters that will be filter the ebd and sampling files\n",
    "states = c(\"US-OK\",\"US-OR\",\"US-PA\",\"US-RI\",\"US-SC\",\"US-SD\",\"US-TN\",\"US-TX\",\"US-UT\",\"US-VT\",\"US-VA\",\n",
    "           \"US-WA\",\"US-WV\",\"US-WI\",\"US-WY\")\n",
    "i = 1\n",
    "for (i in 1:length(states)) {\n",
    "  # define the stuff you want to keep\n",
    "  target_bbox <- c()\n",
    "  target_bcr <- c()\n",
    "  target_country <- c(\"US\")\n",
    "  target_date <- c(\"2009-01-01\", \"2019-01-01\")\n",
    "  target_distance <- c()\n",
    "  target_duration <- c()\n",
    "  target_extent <- c()\n",
    "  target_protocol <- c()\n",
    "  target_species <- c()\n",
    "  target_state <- c(states[i])\n",
    "  target_time <- c()\n",
    "  \n",
    "  ebd_filters <- auk_ebd(file = f_ebd, sep = \"\\t\") %>%\n",
    "    auk_country(country=target_country) %>% \n",
    "    auk_date(date=target_date) %>% \n",
    "    auk_state(state=target_state) %>%\n",
    "    auk_complete()\n",
    "  \n",
    "  # define the filtered output files and run the filtering step\n",
    "  f_out_ebd <- paste0(\"G:/IBA_Update/Ebird_Filtering/Outputs/State_Filters/ebd_10yrs_\",states[i],\".txt\")\n",
    "  \n",
    "  ebd_sed_filtered <- auk_filter(ebd_filters, file=f_out_ebd, \n",
    "                                 overwrite = TRUE)\n",
    "   i = i + 1\n",
    "\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 4. GIS shape file containing polygons that enclose each IBA site\n",
    "This information was obtained from the Important Bird Areas folder on box. I opened the shp file in GIS and calculated the minimum bounding geometry to obtain a rectangle that enclosed each polygon. I then calculated the extent of each rectangle to obtain the min and max lat and longitude for each IBA. \n",
    "\n",
    "arcpy.MinimumBoundingGeometry_management('US_IBAs_2018Feb',\"G:\\IBA_Update\\GIS\\Bounding\\Output\", \"RECTANGLE_BY_AREA\", None)\n",
    "\n",
    "arcpy.AddGeometryAttributes_management('Output', 'EXTENT')\n",
    "\n",
    "arcpy.TableToExcel_conversion(\"MyProject.gdb/US_IBAs_2018Feb_Project_Mini\", \"MinMaxLatLong.xls\"\n",
    "\n",
    "\n",
    "With a csv sheet containing the min/max lat and long for each site, there were approximately 2800 rows that each corresponded to a site within a state. Because it took too long to filter each site out of the ebird database, I divided this csv sheet into 50 smaller csv sheets that were organized by state. I then applied these geographic filters to the ebird files separated by state and as a result, it took two days to obtain a folder for each state that contained all ebird observations per site. \n",
    "\n",
    "filepath: box > ImportantBirdAreas > Data > SpeciesDataUpdate> SpeciesUpdateScripts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Filter by bounding geography (site)\n",
    "\n",
    "library(\"dplyr\")\n",
    "library(tidyverse)\n",
    "library(auk)\n",
    "library(data.table)\n",
    "\n",
    "\n",
    "State <- c(\"ID\",\"ME\",\"MD\",\"MA\",\"MI\",\"MN\",\"MS\",\"MO\",\"MT\",\"NE\",\"NV\",\"NH\",\"NJ\",\"NM\",\"NY\",\n",
    "           \"NC\",\"ND\",\"OH\",\"OK\",\"OR\",\"PA\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VT\",\"VA\",\"WA\",\n",
    "           \"WV\",\"WI\",\"WY\")\n",
    "i = 1\n",
    "y = 1\n",
    "\n",
    "for (i in 1:length(State)){\n",
    "  # Load and clean GIS Bounding Box Data\n",
    "  setwd(\"G:/IBA_Update/Ebird_Filtering/Bbox_StateGroups\")\n",
    "  GIS_Data_Unclean <- read.csv(paste0(\"BoundingGeometry_\",State[i],\".csv\"))    # CHANGE FOR EACH STATE LOCATION!!!\n",
    "  GIS_Data_Cleaned <- GIS_Data_Unclean[,-c(1:35)]   # Remove columns we don't need\n",
    "\n",
    "  # Define variables that will be used in ebird bbox filter\n",
    "  lng_min <- GIS_Data_Cleaned[,1]\n",
    "  lng_max <- GIS_Data_Cleaned[,3]\n",
    "  lat_min <- GIS_Data_Cleaned[,2]\n",
    "  lat_max <- GIS_Data_Cleaned[,4]\n",
    "\n",
    "\n",
    "  # set working directory and see what's inside\n",
    "  ebd_dir <- \"G:/IBA_Update/Ebird_Filtering/Outputs/State_Filters\"\n",
    "  setwd(ebd_dir)\n",
    "  f_ebd <- file.path(ebd_dir, paste0(\"ebd_10yrs_US-\",State[i],\".txt\"))  # ebird state filtered data: CHANGE FOR EACH STATE!!!!\n",
    "\n",
    "  for (y in 1:nrow(GIS_Data_Cleaned)) {\n",
    "    # create your filters that will filter the ebd files that have already been filtered by state\n",
    "    # define the stuff you want to keep\n",
    "    target_bbox <- c(lng_min[y],lat_min[y],lng_max[y],lat_max[y])\n",
    "    target_bcr <- c()\n",
    "    target_country <- c()\n",
    "    target_date <- c()\n",
    "    target_distance <- c()\n",
    "    target_duration <- c()\n",
    "    target_extent <- c()\n",
    "    target_protocol <- c()\n",
    "    target_species <- c()\n",
    "    target_state <- c()\n",
    "    target_time <- c()\n",
    "  \n",
    "    ebd_filters <- auk_ebd(file = f_ebd, sep = \"\\t\") %>%\n",
    "    auk_bbox(bbox = target_bbox) %>% \n",
    "    auk_complete()\n",
    "\n",
    "    # define the filtered output files and run the filtering step\n",
    "    f_out_ebd <- paste0(\"G:/IBA_Update/Ebird_Filtering/Outputs/Bbox_Filtered/\",State[i],\"_Sites/ebd_10yrs_\",State[i],y,\".txt\")\n",
    "    \n",
    "    ebd_sed_filtered <- auk_filter(ebd_filters, file=f_out_ebd, \n",
    "                                   overwrite = TRUE)\n",
    "    \n",
    "\n",
    "    y = y + 1\n",
    "    }\n",
    "  \n",
    "  i = i + 1\n",
    "  } "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "####    c. Identify what sites and species need updating\n",
    "\n",
    "##### 1. Have the A1 species been observed at that site within the last 10 years? \n",
    "We will check the ebird database that contains observations from the last 10 years to see if the species recorded at a particular A1 site have been observed recently. Most observation dates from the IBA database are over 10 years old so most of these will require updating. \n",
    "\n",
    "\n",
    "##### 2. Are the A1 listed species in the IBA database still on the redlist? \n",
    "The following R code takes each species in the IBA database and searches the IUCN Red List to find matches between common names and determine threat category status. If the A1 species are no longer listed on the IUCN redlist, it is necessary to see if there are any other species at that site that are on the redlist. Otherwise, it could be that an A1 listed IBA no longer qualifies as an IBA.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "ERROR",
     "evalue": "Error in setwd(\"~/IBA_Update/IUCN\"): cannot change working directory\n",
     "output_type": "error",
     "traceback": [
      "Error in setwd(\"~/IBA_Update/IUCN\"): cannot change working directory\nTraceback:\n",
      "1. setwd(\"~/IBA_Update/IUCN\")"
     ]
    }
   ],
   "source": [
    "## This script takes species in the A1 category of the IBA Database and checks to see if they are still listed\n",
    "## as critically endangered, endangered, or vulnerable on the IUCN red list. In terms of updating the IBA Database,\n",
    "## the purpose of this step is to determine if the species listed according to A1 criteria should still be considered\n",
    "## for an IBA listing. \n",
    "\n",
    "\n",
    "#install.packages(\"dplyr\")\n",
    "#install.packages(\"ggplot2\")\n",
    "#library(\"ggplot2\")\n",
    "#library(\"dplyr\")\n",
    "#library(\"data.table\")\n",
    "setwd(\"~/IBA_Update/IUCN\")\n",
    "IBA_Data <- read.csv(\"IBA_Names_Category.csv\", header= TRUE, sep=\",\")\n",
    "IUCN_Data <- read.csv(\"IUCN_Names_Category.csv\", header=TRUE, sep=\",\")\n",
    "#names(IBA_Data)\n",
    "#names(IUCN_Data)\n",
    "\n",
    "\n",
    "# Determine which IUCNspecies are also in the IBA database then create new column in IUCN_Data\n",
    "# that contains list of matches (name) and non-matches (NA)\n",
    "IBA_AND_IUCN <- IBA_Data$Common_Name[match(IUCN_Data$Common_Name, IBA_Data$Common_Name)]\n",
    "IUCN_Data <- cbind(IUCN_Data, IBA_AND_IUCN)\n",
    "\n",
    "\n",
    "# THIS IS WHAT WE NEED: Determine which IBA species are also in the IUCN database then create new column in IBA_Data\n",
    "# that contains list of matches (name) and non-matches (NA). This ensures all species in the IBA database are accouned for.\n",
    "IBA_Redlist <- IUCN_Data$Common_Name[match(IBA_Data$Common_Name, IUCN_Data$Common_Name)]\n",
    "IBA_Data <- cbind(IBA_Data, IBA_Redlist)\n",
    "\n",
    "# Takes IBA Common Names, searches in IUCN Database to see if it is listed. If it is listed, it will add the threat\n",
    "# category to the species in IBA data. \n",
    "\n",
    "IBA_Data['RedList_Catagory'] <- NA\n",
    "findCatagory <-  function(currSpecies){\n",
    "  res <- IUCN_Data[which(IUCN_Data$Common_Name == toString(currSpecies)), \"RedList_Category\"]\n",
    "  return (toString(factor(res)))\n",
    "}\n",
    "\n",
    "\n",
    "for (i in 1:length(IBA_Data$Common_Name)){\n",
    "  currSpecies <- IBA_Data$Common_Name[i]\n",
    "  currCatagory <- findCatagory( factor(currSpecies))\n",
    "  IBA_Data$RedList_Catagory[i] = currCatagory\n",
    "}\n",
    "\n",
    "\n",
    "IBA_Data$RedList_Catagory <- as.character(IBA_Data$RedList_Catagory)\n",
    "IBA_Data$RedList_Catagory[IBA_Data$RedList_Catagory==\"\"] <- \"Not Listed\"\n",
    "IBA_Data$RedList_Catagory <- as.factor(IBA_Data$RedList_Catagory)\n",
    "\n",
    "# Remove Duplicate Entries: \n",
    "Unique_Spp_Dates = IBA_Data[!duplicated(IBA_Data[3:6]),] # Get rid of duplicated sites with the same site name and criteria code. Different sampling years not included.\n",
    "write.csv(Unique_Spp_Dates, \"~/IBA_Update/IUCN/IBA_A1_CurrentStatus_DuplicatesRemoved.csv\", row.names = TRUE)\n",
    "\n",
    "\n",
    "###### VISUALIZE ############################################################\n",
    "\n",
    "\n",
    "# Simplify IBA_Data to no duplicates of species name to see how many UNIQUE SPECIES on IUCN red list are critical, \n",
    "# endangered, vulnerable, or not listed on the IUCN Redlist at all. Plot Histogram.\n",
    "data <- read.csv(\"IBA_A1_CurrentStatus_DuplicatesRemoved.csv\", header=TRUE, sep=\",\")\n",
    "IBA_Data_Simplified = data[!duplicated(data[2]),]\n",
    "category <- as.factor(IBA_Data_Simplified$RedList_Catagory)\n",
    "\n",
    "# Label those species that are \"Not Listed\" on the IUCN Redlist \n",
    "IBA_Data_Simplified$RedList_Catagory <- as.character(IBA_Data_Simplified$RedList_Catagory)\n",
    "IBA_Data_Simplified$RedList_Catagory[IBA_Data_Simplified$RedList_Catagory==\"\"] <- \"Not Listed\"\n",
    "IBA_Data_Simplified$RedList_Catagory <- as.factor(IBA_Data_Simplified$RedList_Catagory)\n",
    "\n",
    "write.csv(IBA_Data_Simplified, \"~/IBA_Update/IUCN/IBA_A1_CurrentStatus_UniqueSpeciesONLY.csv\", row.names = TRUE)\n",
    "\n",
    "###### NOTE: If we are to automate this whole process, should include a line that makes a list of the species\n",
    "###### that are no longer listed on the IUCN. \n",
    "\n",
    "\n",
    "ggplot(IBA_Data_Simplified, aes(x = IBA_Data_Simplified$RedList_Catagory)) +\n",
    "   xlab(\"Threat Status\") + ylab(\"Count\") + ggtitle(\"IBA Species RedList Category Frequency\") +\n",
    "   theme(plot.title = element_text(size = 28, face = \"bold\"), axis.title.x = element_text(size = 20, face = \"bold\"),\n",
    "         axis.title.y = element_text(size = 20, face = \"bold\")) +\n",
    "  geom_bar()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Below: R Script with the same thing above but IBA Sites that have species on the Red List (YET DO BE DONE)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part 3: Set up process to update IBA database with ebird data\n",
    "\n",
    "#### a. Rename ebird files that were filtered according to site\n",
    "This update required being able to call on the ebird data by site name. We ran the following script to assign site name to each ebird site filename. \n",
    "\n",
    "The ebird site files that will from here on serve as inputs for updating the ebird database are stored on the server in the following path:\n",
    "    \n",
    " #### G:/IBA_Update/Ebird_Filtering/ebd_sites/state_ebd_sitenames/ebd_siteID.csv\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning message in file(file, \"rt\"):\n",
      "\"cannot open file 'G:/IBA_Update/Ebird_Filtering/Bbox_StateGroups/BoundingGeometry_MT.csv': No such file or directory\""
     ]
    },
    {
     "ename": "ERROR",
     "evalue": "Error in file(file, \"rt\"): cannot open the connection\n",
     "output_type": "error",
     "traceback": [
      "Error in file(file, \"rt\"): cannot open the connection\nTraceback:\n",
      "1. read.csv(paste0(\"G:/IBA_Update/Ebird_Filtering/Bbox_StateGroups/BoundingGeometry_\", \n .     state[y], \".csv\"), header = TRUE, sep = \",\")",
      "2. read.table(file = file, header = header, sep = sep, quote = quote, \n .     dec = dec, fill = fill, comment.char = comment.char, ...)",
      "3. file(file, \"rt\")"
     ]
    }
   ],
   "source": [
    "state = c(\"AZ\",\"CA\",\"CO\",\"CT\",\"DE\",\"FL\",\"GA\",\"HI\",\"ID\",\"IL\",\"IN\",\"IA\",\"KS\",\"KY\",\"LA\",\"ME\",\"MD\",\n",
    "          \"MA\",\"MI\",\"MN\",\"MS\",\"MO\",\"MT\",\"NE\",\"NV\",\"NH\",\"NJ\",\"NM\",\"NY\",\"NC\",\"ND\",\"OH\",\"OK\",\"OR\",\n",
    "          \"PA\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VT\",\"VA\",\"WA\",\"WV\",\"WI\",\"WY\")\n",
    "y=23\n",
    "for (y in 23:length(state)){\n",
    "  #### READ IN DATA ####\n",
    "  ## IBA GIS info for each site\n",
    "  GIS_IBAs <- read.csv(paste0(\"G:/IBA_Update/Ebird_Filtering/Bbox_StateGroups/BoundingGeometry_\",state[y],\".csv\"), header=TRUE, sep=\",\")\n",
    "  \n",
    "  ## IBA Microsoft Access data: Already filtered for A1 sites\n",
    "  IBA_data <- read.csv(\"G:/IBA_Update/Ebird_Filtering/IBA_Input/IBA_A1_Input.csv\", header=TRUE, sep=\",\")\n",
    "  \n",
    "\n",
    "################################## Make CSVs with Site as Filename ##################################\n",
    "\n",
    "    i = 1\n",
    "    for (i in 1:nrow(GIS_IBAs)){\n",
    "      ## species information filtered for each IBA site (ebd output)\n",
    "      ebd_sites <- fread(paste0(\"G:/IBA_Update/Ebird_Filtering/Outputs/Bbox_Filtered/\",state[y],\"_Sites/ebd_10yrs_\",state[y],i,\".txt\"), quote = \"\")\n",
    "      \n",
    "      #### Add row to site_obsv (ebd output) with IBA Site name ####\n",
    "      SiteName <- as.character(GIS_IBAs[i,4])\n",
    "      SiteID <- GIS_IBAs[i,2]\n",
    "      ebd_sites$Site_Name <- as.character(rep(SiteName,nrow(ebd_sites)))\n",
    "      ebd_sites$Site_ID <- as.double(rep(SiteID,nrow(ebd_sites)))\n",
    "      \n",
    "      #### Save the ebd output with site name as the filename ####\n",
    "      write.csv(ebd_sites, paste0(\"G:/IBA_Update/Ebird_Filtering/ebd_sites/\",state[y],\"_ebd_sitenames/ebd_\",SiteID,\".csv\"), row.names = TRUE)\n",
    "      \n",
    "      i = i + 1\n",
    "    }\n",
    "  y = y + 1\n",
    "}\n",
    "\n",
    "\n",
    "## Find the ebd output file that corresponds to the site name in a given row in the IBA_data \n",
    "y <- as.character(IBA_data$National_name[252])\n",
    "site_filename <- read.csv(paste0(\"G:/IBA_Update/Ebird_Filtering/ebd_sites/ebd_\",y,\".csv\"))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### b. Run the Update for A1 and A4 Criteria Only\n",
    "\n",
    "We chose to first attempt updates on A1 and A4 as their criteria is relatively simple to search and verify with R. The following script does the following: \n",
    "\n",
    "a. Takes the IBA data and adds a column for updated date, count, protocol, distance traveled, redlist category, presence of GIS data, verdict (does it meet criteria still?), and reason behind the verdict. \n",
    "\n",
    "b. From GIS we obtained length of each box bounding an IBA site. The next step in the R code is to calculate half of that length for each site and remove all ebird observations in which the person recording observations traveled more than half the length of a sites bounding box. \n",
    "\n",
    "c. With the ebird observations that meet our distance traveled criteria, we looped through each IBA site ID, found its corresponding ebird site file, found the IBA species in the ebird data, and extracted the max count, the date the max count observation was recorded, protocol, and distance traveled. \n",
    "\n",
    "d. We then took the species information from ebird and compared it to the criteria provided by Bird Life International. If an A1 species was listed as vulnerable on the IUCN RedList, we checked if the max count exceeded the vulnerable threshold numbers. If it did, we assigned \"No Action Needed\" to the verdict column. If it did not meet threshold, we assigned \"Action Needed\" and \"Threshold Not Met\" as the verdict and reason. \"No Action Needed\" was assigned to all species that are listed as endangered or critically endangered and \"Action Needed\" to all species that have been delisted. \n",
    "\n",
    "e. For A4 criteria, we checked if the max count number exceeded the number of individuals that make up 1% of the global population for that species. If it did exceed, \"No Action Needed,\" if it did not exceed this number, \"Action Needed\" was assigned. However, for A4 species, the reason column for those that did not meet the population requirement was filled with \"cannot be determined.\" The reason for this being that too many species-specific factors are required that cannot be easily automated from ebird. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Registered S3 methods overwritten by 'ggplot2':\n",
      "  method         from \n",
      "  [.quosures     rlang\n",
      "  c.quosures     rlang\n",
      "  print.quosures rlang\n",
      "\n",
      "Attaching package: 'dplyr'\n",
      "\n",
      "The following objects are masked from 'package:plyr':\n",
      "\n",
      "    arrange, count, desc, failwith, id, mutate, rename, summarise,\n",
      "    summarize\n",
      "\n",
      "The following objects are masked from 'package:stats':\n",
      "\n",
      "    filter, lag\n",
      "\n",
      "The following objects are masked from 'package:base':\n",
      "\n",
      "    intersect, setdiff, setequal, union\n",
      "\n",
      "\n",
      "Attaching package: 'data.table'\n",
      "\n",
      "The following objects are masked from 'package:dplyr':\n",
      "\n",
      "    between, first, last\n",
      "\n",
      "Registered S3 method overwritten by 'rvest':\n",
      "  method            from\n",
      "  read_xml.response xml2\n",
      "-- Attaching packages --------------------------------------- tidyverse 1.2.1 --\n",
      "v tibble  2.1.1     v purrr   0.3.2\n",
      "v tidyr   0.8.3     v stringr 1.4.0\n",
      "v readr   1.3.1     v forcats 0.4.0\n",
      "-- Conflicts ------------------------------------------ tidyverse_conflicts() --\n",
      "x dplyr::arrange()      masks plyr::arrange()\n",
      "x data.table::between() masks dplyr::between()\n",
      "x purrr::compact()      masks plyr::compact()\n",
      "x dplyr::count()        masks plyr::count()\n",
      "x dplyr::failwith()     masks plyr::failwith()\n",
      "x dplyr::filter()       masks stats::filter()\n",
      "x data.table::first()   masks dplyr::first()\n",
      "x dplyr::id()           masks plyr::id()\n",
      "x dplyr::lag()          masks stats::lag()\n",
      "x data.table::last()    masks dplyr::last()\n",
      "x dplyr::mutate()       masks plyr::mutate()\n",
      "x dplyr::rename()       masks plyr::rename()\n",
      "x dplyr::summarise()    masks plyr::summarise()\n",
      "x dplyr::summarize()    masks plyr::summarize()\n",
      "x purrr::transpose()    masks data.table::transpose()\n",
      "\n",
      "Attaching package: 'lubridate'\n",
      "\n",
      "The following objects are masked from 'package:data.table':\n",
      "\n",
      "    hour, isoweek, mday, minute, month, quarter, second, wday, week,\n",
      "    yday, year\n",
      "\n",
      "The following object is masked from 'package:plyr':\n",
      "\n",
      "    here\n",
      "\n",
      "The following object is masked from 'package:base':\n",
      "\n",
      "    date\n",
      "\n"
     ]
    },
    {
     "ename": "ERROR",
     "evalue": "Error in library(date): there is no package called 'date'\n",
     "output_type": "error",
     "traceback": [
      "Error in library(date): there is no package called 'date'\nTraceback:\n",
      "1. library(date)"
     ]
    }
   ],
   "source": [
    "library(plyr)\n",
    "library(ggplot2)\n",
    "library(dplyr)\n",
    "library(data.table)\n",
    "library(tidyverse)\n",
    "library(lubridate)\n",
    "library(date)\n",
    "library(tcltk)\n",
    "\n",
    "\n",
    "############## Load in IBA species observation data and make new columns to later be filled ##############\n",
    "\n",
    "IBA_Species_sites <- read.csv(\"G:/IBA_Update/Ebird_Filtering/IBA_Input/Site_Species_Status_Criteria.csv\") # IBA sites with species information\n",
    "IBA_Species_sites$Assessment_Dt <-  year(as.Date(IBA_Species_sites$Assessment_Dt, format = \"%m/%d/%Y\")) # Standardize Dates\n",
    "IBA_Species_sites[\"Date_Update\"] <- 0  # Make new column of 0s in IBA data to be populated with update info\n",
    "IBA_Species_sites[\"Count_Update\"] <- 0  # Make new column of 0s in IBA data to be populated with update info\n",
    "IBA_Species_sites[\"Ebird_Protocol\"] <- 0  # Make new column of 0s in IBA data to be populated with update info\n",
    "IBA_Species_sites[\"Distance_Traveled\"] <- 0  # Make new column of 0s in IBA data to be populated with update info\n",
    "IBA_Species_sites['RedList_Category'] <- \"NA\"  # Make new column of 0s in IBA data to be populated with update info\n",
    "IBA_Species_sites[\"GIS\"] <- \"Yes\" # Make new column of 0s in IBA data to be populated with update info\n",
    "IBA_Species_sites <- IBA_Species_sites[!duplicated(IBA_Species_sites[1:6]),] # Remove Duplicates\n",
    "\n",
    "# Set Criteria Filter\n",
    "cond1 <- grep(\"^A\",IBA_Species_sites[,6]) # Select all A criteria\n",
    "IBA_A <- IBA_Species_sites[cond1,]\n",
    "\n",
    "\n",
    "############## Load in IUCN/GIS data and calculate GIS half length ############## \n",
    "\n",
    "IUCN_Data <- read.csv(\"G:/IBA_Update/Ebird_Filtering/IUCN_Names_Category.csv\", header=TRUE, sep=\",\")\n",
    "GIS_Data <- read.csv(\"G:/IBA_Update/Ebird_Filtering/GIS_BBOX_Lengths.csv\")\n",
    "GIS_Data$MBG_Length <- GIS_Data$MBG_Length/1000\n",
    "GIS_Data[\"Half_Length\"] <- 0\n",
    "GIS_Data$Half_Length <- GIS_Data$MBG_Length/2\n",
    "\n",
    "############################## CREATE FUNCTIONS TO SEARCH AND POPULATE DATA FILES ##############################\n",
    "\n",
    "# Find date for the species with the highest count number\n",
    "count_dateFind <- function(spp_name){\n",
    "  ebd_date <- df[which(df$Common_Name == toString(spp_name)), \"Obs_date\"]\n",
    "  return (toString(factor(ebd_date)))\n",
    "}\n",
    "\n",
    "# Find ebird count for the IBA species\n",
    "count_obsvFind <- function(spp_name){\n",
    "  ebd_count <- df[which(df$Common_Name == toString(spp_name)), \"Count\"]\n",
    "  return (toString(factor(ebd_count)))\n",
    "}\n",
    "\n",
    "# Find protocol type for the IBA species\n",
    "protocolFind <- function(spp_name){\n",
    "  ebd_protocol <- df[which(df$Common_Name == toString(spp_name)), \"Protocol_Type\"]\n",
    "  return (toString(factor(ebd_protocol)))\n",
    "}\n",
    "\n",
    "# Find distance traveled for the IBA species ebird observation\n",
    "distanceFind <- function(spp_name){\n",
    "  ebd_distance <- df[which(df$Common_Name == toString(spp_name)), \"Distance_Traveled_KM\"]\n",
    "  return (toString(factor(ebd_distance)))\n",
    "}  \n",
    "\n",
    "# Find IUCN Redlist Category\n",
    "findCategory <-  function(spp_name){\n",
    "  res <- IUCN_Data[which(IUCN_Data$Common_Name == toString(spp_name)), \"RedList_Category\"]\n",
    "  return (toString(factor(res)))\n",
    "}\n",
    "\n",
    "# Get GIS Distance for each site\n",
    "GISdist_Find <- function(siteID){\n",
    "  GIS_Dist <- GIS_Data[which(GIS_Data$SITE_ID == toString(siteID)), \"Half_Length\"]\n",
    "  return (toString(factor(GIS_Dist)))\n",
    "}\n",
    "######################### GET COUNT AND DATE FROM EBIRD ########################################\n",
    "\n",
    "i=1\n",
    "for (i in 1:nrow(IBA_A)){\n",
    "  siteID <- IBA_A$Site_ID[i]\n",
    "  state <-  as.character(IBA_A$Abbreviation[i])\n",
    "  IBA_Species <- as.character(IBA_A$Common_Name[i])  \n",
    "  IBA_date <- IBA_A$Assessment_Dt[i]\n",
    "  spp_name <- IBA_Species\n",
    "  \n",
    "  ebd_site_dir <- paste0(\"G:/IBA_Update/Ebird_Filtering/ebd_sites/\",state,\"_ebd_sitenames/\")\n",
    "  site_files <- list.files(ebd_site_dir)\n",
    "  IBAsite_filename <- as.character(paste0(\"ebd_\",siteID,\".csv\"))\n",
    "  \n",
    "  if (IBAsite_filename %in% site_files){\n",
    "    gis_dist <- as.numeric(GISdist_Find(factor(siteID)))\n",
    "    \n",
    "    # Get correct ebird site-filtered file, change counts to numeric\n",
    "    ebd_sitefile <- read.csv(paste0(\"G:/IBA_Update/Ebird_Filtering/ebd_sites/\",state,\"_ebd_sitenames/ebd_\",siteID,\".csv\"))\n",
    "    if (ebd_sitefile[1,2] == \"GLOBAL UNIQUE IDENTIFIER\"){\n",
    "        \n",
    "        Redlist <- findCategory(factor(spp_name))\n",
    "        IBA_A$RedList_Category[i] = Redlist\n",
    "        IBA_A$Date_Update[i] <- \"Site File Empty\"\n",
    "        IBA_A$Count_Update[i] <- \"Site File Empty\"\n",
    "        IBA_A$Ebird_Protocol[i] <- \"Site File Empty\"\n",
    "        IBA_A$Distance_Traveled[i] <- \"Site File Empty\"\n",
    "        IBA_A$RedList_Category[ IBA_A$RedList_Category==\"\"] <- \"Not Listed\"\n",
    "      } else{\n",
    "        ebd_sitefile$OBSERVATION.DATE <-  year(ebd_sitefile$OBSERVATION.DATE)\n",
    "        ebd_sitefile$OBSERVATION.COUNT[ebd_sitefile$OBSERVATION.COUNT == \"x\"] <- 1 \n",
    "        ebd_sitefile$OBSERVATION.COUNT[ebd_sitefile$OBSERVATION.COUNT == \"X\"] <- 1 \n",
    "        ebd_sitefile$EFFORT.DISTANCE.KM[is.na(ebd_sitefile$EFFORT.DISTANCE.KM)] <- 0\n",
    "        ebd_sitefile$OBSERVATION.COUNT <- as.character(ebd_sitefile$OBSERVATION.COUNT)\n",
    "        ebd_sitefile$OBSERVATION.DATE <- as.character(ebd_sitefile$OBSERVATION.DATE)\n",
    "        ebd_sitefile$OBSERVATION.COUNT <- sapply(ebd_sitefile$OBSERVATION.COUNT, as.numeric)\n",
    "        ebd_sitefile$OBSERVATION.DATE <- sapply(ebd_sitefile$OBSERVATION.DATE, as.numeric)\n",
    "        \n",
    "    \n",
    "        # Take out ebird obsv at a site where traveling length exceeds half the length of the site\n",
    "        ebd_sitefile = subset(ebd_sitefile, ebd_sitefile$EFFORT.DISTANCE.KM <= gis_dist)\n",
    "        \n",
    "        # Get row for species with highest count\n",
    "        ind = order(ebd_sitefile$COMMON.NAME, ebd_sitefile$OBSERVATION.COUNT, decreasing=TRUE)\n",
    "        df = ebd_sitefile[ind,]\n",
    "        df = df[!duplicated(df$COMMON.NAME),]\n",
    "        df = df[,c(6,10,16,29,33,37,49,50)]\n",
    "        \n",
    "        # Rename columns of df (data frame of ebird observations with highest count value)\n",
    "        colnames(df)[colnames(df)==\"COMMON.NAME\"] <- \"Common_Name\" \n",
    "        colnames(df)[colnames(df)==\"OBSERVATION.DATE\"] <- \"Obs_date\"  \n",
    "        colnames(df)[colnames(df)==\"OBSERVATION.COUNT\"] <- \"Count\"\n",
    "        colnames(df)[colnames(df)==\"PROTOCOL.TYPE\"] <- \"Protocol_Type\"  \n",
    "        colnames(df)[colnames(df)==\"EFFORT.DISTANCE.KM\"] <- \"Distance_Traveled_KM\"   \n",
    "        \n",
    "        # Get information from ebird csv for each IBA Spp\n",
    "        edate <- count_dateFind(factor(spp_name))\n",
    "        ecount <- count_obsvFind(factor(spp_name))\n",
    "        eprotocol <- protocolFind(factor(spp_name))\n",
    "        edistance <- distanceFind(factor(spp_name))\n",
    "        Redlist <- findCategory(factor(spp_name))\n",
    "        IBA_A$Date_Update[i] = edate\n",
    "        IBA_A$Count_Update[i] = ecount\n",
    "        IBA_A$Ebird_Protocol[i] = eprotocol\n",
    "        IBA_A$Distance_Traveled[i] = edistance\n",
    "        IBA_A$RedList_Category[i] = Redlist\n",
    "        \n",
    "        IBA_A$RedList_Category[ IBA_A$RedList_Category==\"\"] <- \"Not Listed\"\n",
    "        IBA_A$Date_Update[ IBA_A$Date_Update==\"\"] <- \"No Ebird Data\"\n",
    "        IBA_A$Count_Update[IBA_A$Count_Update==\"\"] <- \"No Ebird Data\"\n",
    "        IBA_A$Ebird_Protocol[IBA_A$Ebird_Protocol==\"\"] <- \"No Ebird Data\"\n",
    "        IBA_A$Distance_Traveled[IBA_A$Distance_Traveled==\"\"] <- \"No Ebird Data\"\n",
    "      }\n",
    "        \n",
    "        \n",
    "    } else{\n",
    "        Redlist <- findCategory(factor(spp_name))\n",
    "        IBA_A$RedList_Category[i] = Redlist\n",
    "        IBA_A$GIS[i] = \"NO DATA\"\n",
    "        IBA_A$Date_Update[ IBA_A$Date_Update==\"\"] <- \"No Ebird Data\"\n",
    "        IBA_A$Count_Update[IBA_A$Count_Update==\"\"] <- \"No Ebird Data\"\n",
    "        IBA_A$Ebird_Protocol[IBA_A$Ebird_Protocol==\"\"] <- \"No Ebird Data\"\n",
    "        IBA_A$Distance_Traveled[IBA_A$Distance_Traveled==\"\"] <- \"No Ebird Data\"\n",
    "      }\n",
    "\n",
    "  i = i + 1\n",
    "}\n",
    "\n",
    "write.csv(IBA_A, \"G:/IBA_Update/Ebird_Filtering/Outputs/Update_Output/Acriteria_Updated.csv\")\n",
    "\n",
    "#########################################################################################################################\n",
    "#########################################################################################################################\n",
    "#########################################################################################################################\n",
    "######################### CRITERIA-SPECIFIC UPDATES: A1 & A4 ############################################################\n",
    "\n",
    "\n",
    "A <- read.csv(\"G:/IBA_Update/Ebird_Filtering/Outputs/Update_Output/Acriteria_Updated.csv\", header=TRUE, sep=\",\")\n",
    "A_Untouched <- read.csv(\"G:/IBA_Update/Ebird_Filtering/Outputs/Update_Output/Acriteria_Updated.csv\", header=TRUE, sep=\",\")\n",
    "Criteria <- read.csv(\"G:/IBA_Update/Ebird_Filtering/IBA_Input/IBA_Criteria_US_2018.csv\", header=TRUE, sep=\",\")\n",
    "A[\"Vulnerable_Threshold\"] <- 0\n",
    "A[\"GlobalPop\"] <- 0\n",
    "A[\"Verdict\"] <- \"NA\"\n",
    "A[\"Reason\"] <- \"NA\"\n",
    "\n",
    "\n",
    "threshold <- function(spp_name){\n",
    "  threshold_value <- Criteria[which(tolower(Criteria$Common.name) == toString(tolower(spp_name))), \"A1_Thresholds\"]\n",
    "  return (toString(factor(threshold_value)))\n",
    "}\n",
    "globalpop <- function(spp_name){\n",
    "  pop_value <- Criteria[which(tolower(Criteria$Common.name) == toString(tolower(spp_name))), \"OnePercent_GlobalPop\"]\n",
    "  return (toString(factor(pop_value))) \n",
    "}\n",
    "\n",
    "spp_name <- as.character(A$Common_Name)\n",
    "A$Vulnerable_Threshold <- sapply(spp_name, threshold)\n",
    "A$GlobalPop <- sapply(spp_name, globalpop)\n",
    "A$GlobalPop <- as.numeric(as.character(A$GlobalPop))\n",
    "A$Count_Update <- as.numeric(as.character(A$Count_Update))\n",
    "A$Vulnerable_Threshold <- as.numeric(as.character(A$Vulnerable_Threshold))\n",
    "A$Count_Update[is.na(A$Count_Update)] <- 0\n",
    "\n",
    "########## TEST A1 CRITERIA: IS MAX COUNT GREATER THAN THRESHOLD NUMBERS FOR VULNERABLE A1 SPECIES?\n",
    "i = 1 \n",
    "for (i in 1: nrow(A)){\n",
    "  if (A$RedList_Category[i] == \"Not Listed\"){\n",
    "    A$Verdict[i] <- \"Action Needed\"\n",
    "    A$Reason[i] <- \"Delisted\"\n",
    "  } else if (A$RedList_Category[i] == \"Endangered\"){\n",
    "    A$Verdict[i] <- \"No Action Needed\"\n",
    "    A$Reason[i] <- \"RedList Criteria Met\"\n",
    "  } else if (A$RedList_Category[i] == \"Critically Endangered\"){\n",
    "    A$Verdict[i] <- \"No Action Needed\"\n",
    "    A$Reason[i] <- \"RedList Criteria Met\"\n",
    "  } else if (A$RedList_Category[i] == \"Vulnerable\" & A$Code[i] == \"A1\"){\n",
    "    if(is.na(A$Vulnerable_Threshold[i])){\n",
    "      A$Verdict[i] <- \"Action Needed\"\n",
    "      A$Reason[i] <- \"Insufficient Data\"\n",
    "    } else if (A$Count_Update[i] == 0){\n",
    "      A$Verdict[i] <- \"Action Needed\"\n",
    "      A$Reason[i] <- \"Insufficient Data\"\n",
    "    } else if (A$Count_Update[i] > A$Vulnerable_Threshold[i]){\n",
    "      A$Verdict[i] <- \"No Action Needed\"\n",
    "      A$Reason[i] <- \"Threshold Criteria Met\"\n",
    "    } else {\n",
    "      A$Verdict[i] <- \"Action Needed\"\n",
    "      A$Reason[i] <- \"Threshold Criteria Not Met\"\n",
    "    } \n",
    "    }\n",
    "  i = i + 1\n",
    "}\n",
    "\n",
    "########## TEST A4 CRITERIA: IS MAX COUNT GREATER THAN 1% OF POPULATION (INDIVIDUALS)?\n",
    "i = 1 \n",
    "# A$Code <- as.character(A$Code)\n",
    "A4 = c(\"A4i\",\"A4ii\",\"A4iii\",\"A4iv\")\n",
    "# A$GlobalPop[A$GlobalPop == \"\"] <- NA\n",
    "for (i in 1:nrow(A)){\n",
    "  if (A$Code[i] %in% A4){\n",
    "    if(is.na(A$GlobalPop[i])){\n",
    "      A$Verdict[i] <- \"Action Needed\"\n",
    "      A$Reason[i] <- \"Insufficient Data\"\n",
    "    } else if(A$Count_Update[i] == 0){\n",
    "      A$Verdict[i] <- \"Action Needed\"\n",
    "      A$Reason[i] <- \"Insufficient Data\"\n",
    "    } else if (A$Count_Update[i] > A$GlobalPop[i]){\n",
    "      A$Verdict[i] <- \"No Action Needed\"\n",
    "      A$Reason[i] <- \"Population Criteria Met\"\n",
    "    } else {\n",
    "      A$Verdict[i] <- \"Action Needed\"\n",
    "      A$Reason[i] <- \"Cannot Be Determined\"\n",
    "    }\n",
    "  }\n",
    "  i = i + 1\n",
    "}\n",
    "\n",
    "\n",
    "##### Since we are only doing A1 and A4 criteria now before trying other method, I will subset only A1 and A4 and export \n",
    "Criteria <- c(\"A1\",\"A4i\",\"A4ii\",\"A4iii\",\"A4iv\")\n",
    "A1A4 <- A[A$Code %in% Criteria, ]\n",
    "\n",
    "write.csv(A1A4, \"G:/IBA_Update/Ebird_Filtering/Outputs/Update_Output/A1A4_Updated_Verdicts.csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
